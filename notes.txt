15th July
=========

    -> Java Backend

        -> Core Java ( Language Fundamentals ) - 60% 

        -> Advance Java ( MT, EH, Collections Framework, SQL, RDBMS ) - 20%

        -> Spring Framework / Spring Boot (API's - Micro Services) - 20%

    -> Java 

        -> Programming Language

    -> Language ?

            -> Communication (Verbal, Written, Gestures etc)

            -> Languages Constructed ?

                -> Regions (South India - North India etc)

            -> Human to Human (English, Hindi, Telugu etc)

    -> Programming ?

        -> Set Of Rules / Instructions

            -> TASK 

    -> Programming Language

        -> Set Of Instructions To Perform TASK

    -> Javascript, Java, Python, C etc

    -> Based On Domains 

    -> Java vs Python 

        -> Java is performance oriented (FASTEST) --> COMPILED 

        -> Python is performance oriented (FAST) --> INTERPRETED

        -> Build An Application (Java -> 6 Months)  (Run Faster)
        -> Build An Python      (Python -> 6 Weeks) (Develop Faster)
    
    -> How Many ways you can Perform a TASK(Programming) ?

        -> Programming paradigms are fundamental styles or approaches used 
            in computer programming to solve problems.

        -> Imperative Programming Language

            -> How To Do 

            -> Java is Imperative Programming Language

        -> Declarative Programming Language

            -> What To Do 

            -> SQL is Declarative Programming Language

        -> High Level

        -> Low Level

            01101010 01100001 01110110 01100001 00100000 01101001 
            01110011 00100000 01100010 01100101 01110011 01110100

        -> Myntra Application

            brandName = The Indian Garage Co
            ratings = 4.2
            price = 750
            size = 36

            System.out.println(" The Brand is "+brandName+ " has ratings"+ratings)

            -> On the Object Level

            -> Object -> Screen, Table,  



            16th July
=========

    -> Install Java (21 LTS)

    -> Install VS Code (IDE - Integrated Development Environment)

    -> GitHub (Platform To Store Code and Collaborate)

    -> Git (Client To Enable Tracking)

    -> Version Control / Source Control / Revision Control

        -> Keep Track Of Changes(Programs, Website files, any file)

    -> Install Git On Your Laptop  

    -> Setup GitHub Account

    17th July
=========

class App{
    // if you want to run a java program, class and main method are must
    // public -access modifier
    // static - no object is required to run program
    // void - return nothing
    // main - method name, String[] args- its a arrgument for main method
    public static void main(String[] args) {
        // method body
        System.out.println("Hello World");
    }
}
this process how to write the Code

    -> Java Compiler (javac)

    -> Java Interprter (java)

    -> JVM - JRE - JDK

        -> JVM - Java Virtual Machine

            -> Converts Byte Code To Machine Code

            -> Java Platform Independent (JVM)

        
        -> JRE - Java Runtime Environment

            -> In Servers we use JRE 

            -> JRE is used to RUN JAVA PROGRAMS / APPS

            -> JRE is NOT used to DEVELOP JAVA PROGRAMS / APPS

        -> JDK - Java Development Kit

            -> In Developer Laptops we use JDK

            -> JDK Contains various utilities to Develop & Run Java Programs

    -> W.R.T Hello World Program (App.java)

        -> JDK : You Write Java Code Using JDK Tools (java)

        -> JRE : You Compile Java Code Using JRE (javac)

        -> JVM : Reads .class file i.e Byte Code and Gives it to OS for execution

18th July
=========

    -> Variables

        -> Store the values ?

            -> To retrieve data 
            -> To perform some operations on data
            -> To Store data

        -> brand
        -> description
        -> ratings
        -> price 

        -> Data you want to store, you need to specify data type
            -> above approach is called as Static Typed/Strict Typed

        -> Data Type is classification of data

            -> Primitive Data types 

                -> Fundamental data types, which are prebuilt to store numbers, decimals,
                    characters, symobols, true and false

                        -> byte
                        -> short
                        -> int
                        -> long
                        -> float
                        -> double
                        -> char
                        -> boolean


            -> Non-Primitive Data types

                -> Either we can use already defined by java, Strings, Arrays, Collections, Interfaces etc

                -> As a user you can create your own data types as well
                    Student, Employee, Company etc  
    
    -> NOTE : The local variable someDataNew2 may not have been initialized

    -> We have Instance Variables, Local Variables & Satic Variables 

        -> For any kind of Variables we work with, we need to specify Datatype

    -> Based on the data type we select, default values are applicable

    ->Code what i have done :
-> package second_variables;
public class LMSVariables {
// Student-> ID,Name,Email,Password, Gender, Mobile Number
//define datatype
    public static void main(String[] args) {
        short studentID = 101;
        String studentName = "Jyo";
        String studentEmail = "katrujyo@gmail.com";
        String studentPassword = "pass@133";
        char studentGender_1 = 'F';
        boolean isStudentFemale = true;
        long studentMobileNumber = 900009888;

        System.out.println("Student ID:" +studentID);
        System.out.println("Student Name:" +studentName);
        System.out.println("Student Email:" +studentEmail);
        System.out.println("Student Password:" +studentPassword);
        System.out.println("Student Gender_1:" +studentGender_1);
        System.out.println("Student Gender Female:" +isStudentFemale);
        System.out.println("Student MobileNumber:" +studentMobileNumber);
    }
}
->package second_variables;

public class VariablesDemo {
            //brand
            //descripation
            //rating
            //price
        // if we define variable in class we call them instance variables
    static int someData1;
    static double someData2;  //declartion
    static char someData3; 
    static boolean someData4;   
    short price = 350;
    String brand = "HIGHLANDER";
    float rating=4.2f;
    public static void main(String[] args) {
        //if we define variable in methods we call them as local variables
        int someDataNew1 = 10; //intilization
        //int someDataNew2; // declaration
        System.out.println(someDataNew1); 
        //System.out.println(someDataNew2);

        System.out.println(someData1);
        System.out.println(someData2);
        System.out.println(someData3);
        System.out.println(someData4);
    }
}

-->Task
package second_variables;

public class CarVariables {
    public static void main(String[] args) {
        String EngineAndTransmission="Engine&Transmission";
           String EngineType="mHAWK 4 cylinder";
           String Displcement="2184cc";
           String MaxPower="130bhp@3750rpm";
           String MaxTorque="300Nm@1600-2800rpm";
           byte NoOfCylinders=4;
           byte ValvesPerCylinder=4;
           String FuelSupplySystem="CRDi";
           boolean isTurboChargeIsYes=true;
           boolean isTurboChargeIsNo=false;
           String TransmissionType="Manual";
           String GearBox="6-Speed";
           String DriveType="RWD";


        



           System.out.println("EngineAndTransmission:"+EngineAndTransmission);
           System.out.println("EngineType:"+EngineType);
           System.out.println("Displcement:"+Displcement);
           System.out.println("MaxPower:"+MaxPower);
           System.out.println("MaxTorque:"+MaxTorque);
           System.out.println("NoOfCylinders:"+NoOfCylinders);
           System.out.println("ValvesPerCylinder:"+ValvesPerCylinder);
           System.out.println("FuelSupplySystem:"+FuelSupplySystem);
           System.out.println("isTurboChargeIsYes:"+isTurboChargeIsYes);
           System.out.println("isTurboChargeIsNo:"+isTurboChargeIsNo);
           System.out.println("TransmissionType:"+TransmissionType);
           System.out.println("GearBox:"+GearBox);
           System.out.println("DriveType:"+DriveType);
    }
}


21st July
=========

    -> Type Conversion & Type Casting

        -> Convert One Datatype to Another Datatype

    -> Type Conversion 

        -> Automatic / Implicit - is done by java Compiler, when Conversion is considered SAFE

        -> NO LOSS OF DATA (SAFE)

        -> WIDENING / Implicit Conversion / Type Conversion
        ->int num1 = 10;
        double num2 =num1; //type Conversion

        System.out.println("Original Value:" +num1);
        System.out.println("Converted Value:" +num2);

    -> Type Casting 

        -> Manual / Explicit - is done by developer, when Conversion is considered UNSAFE

        -> LOSS OF DATA (UNSAFE)

        -> NARROWING / Explicit Conversion / Type Casting

        -> To Perform Casting we need to keep target datatype in parentheses (int) before value
        ->double num3 = 3.14;
        int num4 = (int) num3;//Type mismatch: cannot convert from double to int
                            //you need to do the manual conversion
        System.out.println("Original Value:" +num3);
        System.out.println("Original Value:" +num4);

    -> Incompatible Conversions

        -> Text To Number or Number To Text (Possible)
        int zip = 500081;
       // String str_zip = (String)zip;//Cannot cast from int to String
       String str_zip = String.valueOf(zip);// String.valueOf is the key to do the process.
       System.out.println("Original Value:" +zip);
       System.out.println("Original Value:" +str_zip);
       System.out.println(str_zip+5);//it works but it will not add value ans will be 5000815  5 is add as a string we are passing in str that's why it is add as a string

       String str_zip_new = "500081";
       //String str_zip_new = "five lakhs eighty one";//lang.NumberFormatException it can't concat
       int zip_new = Integer.parseInt(str_zip_new);//Integer.parseInt  is the key to do the process.
       System.out.println("Original Value:" +str_zip_new);
       System.out.println("Original Value:" +zip_new);
       System.out.println(zip_new+5);

        -> https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.
        
22nd July
=========

    -> Variables 
        -> Store the Data
        -> Retrieve the Data
        -> Manipulate the Data(Operators)

    -> Operators    

        -> Special Symbols, perform operations on Variables & Value

            -> Values - Operands
            -> Symbols - Operators
        
    -> Types Of Operators

        -> Arithmetic Operators

            -> For Mathematical Calculation
                + - * / % 
                ->Addition operators
                    int num1 = 10;
                    int num2 = 6;
                    int sum = num1+num2;
                    System.out.println("Sum:" +sum);
                ->Subtraction operators
                    int diff = num1 - num2;
                    System.out.println("Difference:"+diff);
                    System.out.println("Product:"+(num1*num2));
                    System.out.println("Division:"+(num1/num2));
                    System.out.println("Modulus:"+(num1%num2));

        -> Increment / Decrement Operators

            -> To Increase or Decrease the value by 1
            -> Mostly used in Loops(repeated actions)
            -> Increment ++ (pre/post)   
            -> Decrement -- (pre/post)   

                int a = 10;
                System.out.println("A: "+a);
                System.out.println("++A: "+ ++a);//Pre increment
                System.out.println("A++: "+ a++);//post increment
                System.out.println("A: "+a);

                System.out.println("++A: "+ --a);//Pre Decrement
                System.out.println("A++: "+ a--);//post Decrement
                System.out.println("A: " +a);

        -> Compound Assignment Operators

            -> Assignment Operator is =

            -> Compound Assignment Operators 
            Used to perform Arithmetic operations in concise(short) form

            -> Compound Assignment Operators
                +=, -=, *=, /=, %=

            -> x = x + 5(long form) or x += 5 (short form)
            ->int num = 10;
                num += 5;
                System.out.println("Number is:"+num);


        -> Relational Operators (Comparison)

            -> Used to compare values and return true/false(boolean)

            -> Mostly used in conditional checks

            -> ==, !=, >, <, >=, <=

            ->int x=10;
                int y=5;
                System.out.println("X is greater than Y:" +(x>y));
                System.out.println("X is eq ual to Y:" +(x==y));

        -> Logical Operators

            -> Used to combine multiple conditionals

            -> Used to compare values and return true/false(boolean)  

            -> Mostly used in conditional checks

            -> && (AND) - returns true, if both(multiple) conditions are true
            -> || (OR)  - returns true, if one of the conditions is true
            -> ! (NOT)  - inverts, true is false and false is true

            X       Y       X && Y      X || Y      !X      !Y
            T       T         T            T         F       F
            T       F         F            T         F       T    
            F       T         F            T         T       F
            F       F         F            F         T       T
            ->
            int l=7;
            int m=5;
            int n=3;
            int o=7;

            boolean resultAND = l > m && n > o; //T && F -> T
            System.out.println(resultAND);

            boolean resultOR = l > m || n > o; //T && F -> T
            System.out.println(resultOR);


        -> Bitwise Operators

            -> Used To Perform operations On Binary Bits (01)

            -> Mostly used in low level programming 

                -> Embedded Systems, Network Programming, OS Level etc

            -> & (AND) - Sets each bit to 1, if both the bits are 1   
            -> | (OR) - Sets each bit to 1, if one of the bits is 1
            -> ^ (XOR) - Sets each bit to 1, if only one of the bits is 1
                       - if both values are different then output is 1
                       - if both values are same then output is 0
            -> ~ (NOT) (tilde) - Inverts the bits (0 becomes 1 and 1 becomes 0)
            -> << (Left Shift) 
                -> Moves the bits left specified by number of positions, let the leftmost
                bits falls off (pushing zeros in from right)
            -> >> (Right Shift)
                -> Moves the bits right specified by number of positions, let the rightmost
                bits falls off (pushing zeros in from left)

            ->  int valuea =5; //0000000000000101
                int valueb =3; //0000000000000011
                int resultand = valuea & valueb;//0000000000000001-->1
                System.out.println(resultand);

                int resultor = valuea | valueb; //0000000000000111-->7
                System.out.println(resultor);

                int resultxor = valuea ^ valueb;//0000000000000110-->6
                System.out.println(resultxor);

                int result = ~valueb; //0000000000000011-->1111111111111100
                System.out.println(result);


                    //Left shift
                    //int valueb = 3; //0000000000000011
                System.out.println(valueb<<2);//0000000000001100-->12
                System.out.println(valueb<<1);//0000000000000110-->6
                System.out.println(valueb<<3);//0000000000011000-->24
                //right shift
                //int valueb = 3; //0000000000000011
                System.out.println(valueb>>2);//0000000000000000-->0
